{"version":3,"sources":["components/todoData.js","components/CheckBox.js","components/Item.js","components/CreateItem.js","App.js","serviceWorker.js","index.js"],"names":["database","text","completed","date","time","endTime","CheckBox","props","className","id","type","checked","onChange","e","handleCheckBox","Item","item","htmlFor","CreateItem","state","dataHandler","setState","target","name","value","submitHandler","preventDefault","onSubmit","this","React","Component","App","data","newItem","prevState","console","log","newData","map","mapIndex","databaseItems","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a67e05d5.chunk.js","sourcesContent":["\r\nexport const database = [\r\n  { text: \"first text\", completed:false,date: \"\", time: \"\", endTime: \"\" },\r\n  { text: \"second text\",completed:false, date: \"\", time: \"\", endTime: \"\" },\r\n  { text: \"third text\",completed:false, date: \"\", time: \"\", endTime: \"\" },\r\n  { text: \"forth text\", completed:true,date: \"\", time: \"\", endTime: \"\" },\r\n  { text: \"fifth text\",completed:true, date: \"\", time: \"\", endTime: \"\" },\r\n];\r\n","import React from \"react\";\r\n\r\nconst CheckBox = (props) => {\r\n\r\n  return (\r\n    <div className=\"CheckBox\">\r\n      <input\r\n      id={props.id}\r\n        type=\"checkbox\"\r\n        checked={props.completed}\r\n        //using the index as id from the database array\r\n        onChange={(e)=>props.handleCheckBox(e,props.id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default CheckBox;\r\n","import React from \"react\";\r\nimport ChecKBox from \"./CheckBox\";\r\n\r\nconst Item = (props) => {\r\n  return (\r\n    <div className=\"Item\">\r\n      <ChecKBox\r\n        completed={props.item.completed}\r\n        handleCheckBox={props.handleCheckBox}\r\n        id={props.id}\r\n      />\r\n      <label htmlFor={props.id}>{props.item.text}</label>\r\n    </div>\r\n  );\r\n};\r\nexport default Item;\r\n","import React from \"react\";\r\n\r\nclass CreateItem extends React.Component {\r\n\r\n    state ={\r\n        text:'',\r\n        completed:'',\r\n        date:'',\r\n        time:'',\r\n        endTime:'',\r\n    }\r\n    dataHandler =(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault();\r\n        this.props.CreateItem(this.state)\r\n\r\n        this.setState({\r\n            text:'',\r\n            completed:'',\r\n            date:'',\r\n            time:'',\r\n            endTime:'',\r\n        })\r\n\r\n    }\r\n    render(){\r\n \r\n    \r\n  \r\n  return (\r\n    <div>\r\n      <form onSubmit={this.submitHandler}>\r\n        <input type=\"text\" onChange={this.dataHandler} name='text' value={this.state.text}/>\r\n        <input type='date' onChange={this.dataHandler} name='date' value={this.state.date} />\r\n        <input type='time' onChange={this.dataHandler} name='time' value={this.state.time}/>\r\n        <input type='time' onChange={this.dataHandler} name='endTime' value={this.state.endTime}/>\r\n        \r\n        <input type=\"submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n}\r\nexport default CreateItem;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { database } from \"./components/todoData\";\nimport Item from \"./components/Item\";\nimport CreateItem from \"./components/CreateItem\";\n\nclass App extends React.Component {\n  state = {\n    data: [],\n  };\n  CreateItem = (newItem) => {\n    this.setState((prevState) => {\n      let newData = [...prevState.data, newItem];\n      return {\n        data: newData,\n      };\n    });\n\n    console.log(\"item created\");\n  };\n\n  handleCheckBox = (e, id) => {\n    //doing the function outside the setsate and inside the setstate both works\n    //outside avoids re-render changing re-runing the conditional statements\n\n    let newData = this.state.data.map((item, mapIndex) => {\n      if (mapIndex === id) {\n        // item.completed = !item.completed (changes the previous state. The retun below does not)\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }\n      return item;\n    });\n\n    //  console.log(newData);\n    //  console.log(this.state.data);\n    this.setState({ data: newData });\n\n    //when state is modified indirectly the problem of rerendering this not occur in this case\n    //     this.setState((prevState) => {\n    //       let newData = prevState.data.map((item, mapIndex) => {\n    //         if (mapIndex === id) {\n    // console.log(item.completed);\n    //           return {\n    //             ...item,\n    //           completed:!item.completed\n    //           }\n    //         }\n    //         return item;\n    //       });\n    //       return { data: newData };\n    //     });\n  };\n\n  componentDidMount() {\n    // useing this for now to illustrate wat will happen in a real database\n    //could have just passed database directly to data\n    this.setState({ data: database });\n  }\n  render() {\n    // console.log('render');\n\n    const databaseItems = this.state.data.map((item, index) => {\n      return (\n        <Item\n          key={index}\n          // key is not a property it will return undefined\n          //using index to get the index value\n          id={index}\n          item={item}\n          handleCheckBox={this.handleCheckBox}\n        />\n      );\n    });\n    return (\n      <div className=\"App\">\n        <CreateItem CreateItem={this.CreateItem} />\n\n        {databaseItems}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}